# this is a modified PN532 to make it work with 888byte tags
external_components:
  - source: github://luka6000/TagTuner@main
    components: [ pn532 ]
    refresh: 1min

# These substitutions allow the end user to override certain values
substitutions:
  name: "tagtuner"
  friendly_name: "TagTuner"

esphome:
  name: "${name}"
  friendly_name: ${friendly_name}
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true

  # hello world
  on_boot:
    priority: -100
    then:
    - light.turn_on:
        id: led1
        effect: HelloWorld
    - delay: 1000ms
    - light.turn_off: led1
    - text_sensor.template.publish:
        id: status
        state: "Ready"

esp32:
  board: m5stack-atom
  framework:
    type: arduino

# To be able to get logs from the device via serial and api.
logger:
  # level: VERBOSE
  level: DEBUG
  # level: WARN
  logs:
    light: WARN
    # pn532: DEBUG
    # pn532_i2c: DEBUG

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:
  platform: esphome

wifi:
  # Set up a wifi access point using the device name above
  ap:
    password: "12345678"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

# Sets up the improv via serial client for Wi-Fi provisioning
improv_serial:

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19

media_player:
  - platform: i2s_audio
    id: mp1
    name: Player
    dac_type: external
    i2s_dout_pin: GPIO22
    mode: mono

binary_sensor:
  - platform: template
    name: "=Reading="
    device_class: running
    entity_category: DIAGNOSTIC
    lambda: |-
      if ( !id(pn532_board).is_writing() ) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "=Writing="
    device_class: running
    entity_category: DIAGNOSTIC
    lambda: |-
      if ( id(pn532_board).is_writing() ) {
        return true;
      } else {
        return false;
      }
  - platform: gpio
    id: toggle
    pin:
      number: GPIO39
      inverted: true
    on_multi_click:
    - timing:
        - ON for at most 300ms
        - OFF for at most 250ms
        - ON for at most 300ms
        - OFF for at least 50ms
      then:
        - script.execute: led_blink
        - logger.log: "Double Clicked"
        - text_sensor.template.publish:
            id: status
            state: "Next"
        - homeassistant.event:
            event: esphome.tagtuner
            data:
              action: "next"
    - timing:
        - ON for 0.5s to 2s
        - OFF for at least 50ms
      then:
        - script.execute: led_blink
        - logger.log: "Single Long Clicked"
        - text_sensor.template.publish:
            id: status
            state: "Mute"
        - homeassistant.event:
            event: esphome.tagtuner
            data:
              action: "mute"
    - timing:
        - ON for at most 300ms
        - OFF for at least 260ms
      then:
        - script.execute: led_blink
        - logger.log: "Single Short Clicked"
        - text_sensor.template.publish:
            id: status
            state: "Play/Pause"
        - homeassistant.event:
            event: esphome.tagtuner
            data:
              action: "play_pause"

light:
  - platform: esp32_rmt_led_strip
    id: led1
    pin: GPIO27
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    restore_mode: ALWAYS_OFF
    default_transition_length: 0s
    flash_transition_length: 0s
    effects:
      - strobe:
          name: HelloWorld
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 250ms
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%
              duration: 250ms
      - strobe:
          name: TagWrite
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 250ms
            - state: false
              duration: 50ms

script:
  - id: led_blink
    then:
    - light.turn_on:
        id: led1
        brightness: 60%
        red: 100%
        green: 100%
        blue: 100%
        flash_length: 100ms
  - id: led_ok
    then:
    - light.turn_on:
        id: led1
        brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
        flash_length: 50ms
    - delay: 100ms
    - light.turn_on:
        id: led1
        brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
        flash_length: 50ms
  - id: led_success
    then:
    - light.turn_on:
        id: led1
        brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
        flash_length: 200ms
    - delay: 250ms
    - light.turn_on:
        id: led1
        brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
        flash_length: 200ms
    - delay: 250ms
    - light.turn_on:
        id: led1
        brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
        flash_length: 500ms

text:
  - platform: template
    id: playlist_artist
    name: "Playlist artist"
    icon: mdi:account-music
    entity_category: CONFIG
    optimistic: true
    min_length: 0
    max_length: 50
    mode: text
    initial_value: " "
  - platform: template
    id: playlist_info
    name: "Playlist name or album title"
    icon: mdi:playlist-music
    entity_category: CONFIG
    optimistic: true
    min_length: 0
    max_length: 100
    mode: text
    initial_value: " "
  - platform: template
    id: playlist_uri
    name: "Playlist URI"
    icon: mdi:link-variant
    entity_category: CONFIG
    optimistic: true
    min_length: 0
    max_length: 255
    mode: text
    initial_value: " "

text_sensor:
  - platform: template
    id: status
    name: "Status"
    icon: mdi:ladybug
    entity_category: DIAGNOSTIC
    on_value:
      if:
        condition:
          lambda: 'return id(status).state != "Waiting for input";'
        then:
        - delay: 3s
        - text_sensor.template.publish:
            id: status
            state: "Waiting for input"

sensor:
  - platform: rotary_encoder
    id: rotary
    pin_a: 25
    pin_b: 21
    min_value: 0
    max_value: 20
    on_clockwise:
      - text_sensor.template.publish:
          id: status
          state: "Volume up"
      - homeassistant.event:
          event: esphome.tagtuner
          data:
            action: "volume_up"
      - script.execute: led_blink
    on_anticlockwise:
      - text_sensor.template.publish:
          id: status
          state: "Volume down"
      - homeassistant.event:
          event: esphome.tagtuner
          data:
            action: "volume_down"
      - script.execute: led_blink

button:
  - platform: restart
    name: "${friendly_name} Restart"
    entity_category: DIAGNOSTIC

  - platform: template
    name: Cancel writing 
    id: cancel_writing
    icon: "mdi:broadcast-off"
    entity_category: CONFIG
    on_press:
      then:
      - lambda: 'id(pn532_board).read_mode();'
      - wait_until:
          timeout: 30s
          condition:
            not:
              pn532.is_writing:
      - delay: 5ms
      - text_sensor.template.publish:
          id: status
          state: "Cancel writing tag"
      - light.turn_off: led1
      - script.execute: led_ok

  - platform: template
    name: Erase Tag
    id: erase_tag
    icon: "mdi:nfc-search-variant"
    entity_category: CONFIG    
    on_press:
      then:
      - light.turn_on:
          id: led1
          effect: TagWrite
      - text.set:
          id: playlist_artist
          value: ''
      - text.set:
          id: playlist_info
          value: ''
      - text.set:
          id: playlist_uri
          value: ''
      - lambda: 'id(pn532_board).format_mode();'
      - text_sensor.template.publish:
          id: status
          state: "Place tag"
      - wait_until:
          timeout: 30s
          condition:
            not:
              pn532.is_writing:
      - if:
          condition:
            pn532.is_writing:
          then:
          - lambda: 'id(pn532_board).read_mode();'
      - text_sensor.template.publish:
          id: status
          state: "Finished erasing tag"
      - light.turn_off: led1
      - script.execute: led_success

  - platform: template
    name: Write Tag
    id: write_tag
    icon: "mdi:cast-audio-variant"
    entity_category: CONFIG    
    on_press:
      then:
      - light.turn_on:
          id: led1
          effect: TagWrite
      - lambda: |-
          auto message = new nfc::NdefMessage();
          message->add_text_record("TagTuner");
          std::string uri = "";
          std::string artist = "artist/";
          std::string playlist = "playlist/";
          uri += id(playlist_uri).state;
          artist += id(playlist_artist).state;
          playlist += id(playlist_info).state;
          if ( artist != "" ) {
            message->add_text_record(artist);
          }
          if ( playlist != "" ) {
            message->add_text_record(playlist);
          }
          if ( uri != "" ) {
            message->add_uri_record(uri);
          }
          ESP_LOGD("ndef", "Writing payload: %s", uri.c_str());
          id(pn532_board).write_mode(message);
      - text_sensor.template.publish:
          id: status
          state: "Place tag"
      - wait_until:
          timeout: 30s
          condition:
            not:
              pn532.is_writing:
      - if:
          condition:
            pn532.is_writing:
          then:
          - lambda: 'id(pn532_board).read_mode();'
      - logger.log: "Finished writing tag"
      - text_sensor.template.publish:
          id: status
          state: "Finished writing tag"
      - light.turn_off: led1
      - script.execute: led_success

globals:
  - id: artist
    type: std::string
  - id: playlist
    type: std::string
  - id: uri
    type: std::string

i2c:
  sda: 26
  scl: 32
  scan: False
  frequency: 100kHz
  timeout: 13ms #to prevent pn532 timeout

pn532_i2c:
  id: pn532_board
  update_interval: 350ms
  on_tag_removed:
    - logger.log: "on_tag_removed"
    - text_sensor.template.publish:
        id: status
        state: "Tag removed"
    - homeassistant.event:
        event: esphome.tagtuner
        data:
          action: "tag_removed"
          uid: !lambda 'return x;'
    - script.execute: led_blink

  on_tag:
    - logger.log: "on_tag"
    - text_sensor.template.publish:
        id: status
        state: "Tag read"
    - text_sensor.template.publish:
        id: status
        state: !lambda 'return x;'
    - lambda: |-
        id(playlist)="";
        id(artist)="";
        id(uri)="";

        if (tag.has_ndef_message()) {
          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          for (auto &record : records) {
            std::string payload = record->get_payload();
            std::string type = record->get_type();
            std::string tag_artist = payload.substr(0, 7);
            std::string tag_playlist = payload.substr(0, 9);

            if ( tag_artist == "artist/" ) {
              id(artist)=payload.substr(7);
            }
            else if ( tag_playlist == "playlist/" ) {
              id(playlist)=payload.substr(9);
            }
            else if (type == "U" && payload.substr(0, 20) != "https://mb.senic.com" ) {
              id(uri)=payload;
            }

          }
        }
    - if:
        condition:
          lambda: 'return id(uri) == "" ;'
        then:
        - text_sensor.template.publish:
            id: status
            state: "Plain UID tag"
        - homeassistant.tag_scanned: !lambda |-
            ESP_LOGD("tagtuner", "No TagTuner NDEF, using UID");
            return x;
        else:
        - text.set:
            id: playlist_artist
            value: !lambda |-
              return id(artist);
        - text.set:
            id: playlist_info
            value: !lambda |-
              return id(playlist);
        - text.set:
            id: playlist_uri
            value: !lambda |-
              ESP_LOGD("tagtuner", "URI NDEF");
              return id(uri);
        - homeassistant.event:
            event: esphome.tagtuner
            data:
              action: "tag_scanned"
              uid: !lambda 'return x;'
              uri: !lambda 'return id(uri);'
              artist: !lambda 'return id(artist);'
              playlist: !lambda 'return id(playlist);'
    - script.execute: led_blink
